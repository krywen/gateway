/*
 * This source file was generated by the Gradle 'init' task
 */
package com.blocklollo.gateway

import io.ktor.server.application.Application
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.request.receive
import io.ktor.server.response.respond
import io.ktor.server.response.respondText
import io.ktor.server.routing.get
import io.ktor.server.routing.post
import io.ktor.server.routing.routing
import org.kodein.di.DI
import org.kodein.di.bind
import org.kodein.di.instance
import org.kodein.di.singleton
import java.security.SecureRandom
import java.util.Random


/**
 * This would start and wait a web-server at port 8080 using Netty,
 * and would load the 'myKodeinApp' ktor module.
 */
fun main() {
    embeddedServer(Netty, port = 8080, module = Application::myKodeinApp).start(wait = true)
}

/**
 * The main and only module of the application.
 * This module creates a Kodein container and sets
 * maps a Random to a singleton based on SecureRandom.
 * And then configures the application.
 */
fun Application.myKodeinApp() = myKodeinApp(DI {
    bind<Random>() with singleton { SecureRandom() }
})


/**
 * This is the application module that has a
 * preconfigured [kodein] instance as input.
 *
 * The idea of this method, is that the different modules
 * can call this with several configured kodein variants
 * and also you can call it from the tests setting mocks
 * instead of the default mappings.
 */
fun Application.myKodeinApp(kodein: DI) {
    val random by kodein.instance<Random>()

    routing {
        get("/rand") {
            val range = 0 until 100
            call.respondText("Random number in $range: ${random[range]}")
        }
        get("/hello") {
            call.respondText("hello")
        }
        get("/j") {
            call.respond(AnswerJ("my name is"))
        }
        post ("/j") {
            val body = call.receive<String>()
            call.respondText("Your body was: $body")
        }
    }
}

data class AnswerJ(
    val name: String
)

/**
 * Convenience [Random] extension operator method to get a random integral value inside the specified [range].
 */
private operator fun Random.get(range: IntRange) = range.first + this.nextInt(range.last - range.first)
